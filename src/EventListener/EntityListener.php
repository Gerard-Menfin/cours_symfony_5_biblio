<?php 
/** 
 * ðŸ’¬ Cette classe est donc un Ã©couteur d'Ã©vÃ¨nement. On va dÃ©finir dans
 * ðŸ’¬ cette classe des mÃ©thodes qui seront exÃ©cutÃ©es lorsqu'un Ã©vÃ¨nement 
 * ðŸ’¬ particulier sera activÃ© 
 * ? ne fonctionne pas pour la propriÃ©tÃ© livre dispo
 * */

namespace App\EventListener;

use App\Entity\Livre;
use App\Repository\LivreRepository;
use Doctrine\ORM\Event\LifecycleEventArgs;

class EntityListener{
    /* Cette mÃ©thode est dÃ©clenchÃ©e pour chaque Ã©vÃ¨nement liÃ©e Ã  une entitÃ© */
    public function onEntityLifecycle(LifecycleEventArgs $lifeCycle)
    {
        // todo DEPRECATED $entite = $lifeCycle->getEntity();
        $entite = $lifeCycle->getObject();
        /* Si l'entitÃ© qui a dÃ©clenchÃ© l'Ã©vÃ¨nement est une entitÃ© Livre... */
        if( $entite instanceof Livre ){
            // todo DEPRECATED $livreRepository = $lifeCycle->getEntityManager()->getRepository(Livre::class);
            $livreRepository = $lifeCycle->getObjectManager()->getRepository(Livre::class);
            $entite->setDispo( !in_array($entite, $livreRepository->findLivresEmpruntes()) );
        }
    }
}