<?php

namespace App\Repository;

use App\Entity\Emprunt;
use App\Entity\Genre;
use App\Entity\Livre;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method Livre|null find($id, $lockMode = null, $lockVersion = null)
 * @method Livre|null findOneBy(array $criteria, array $orderBy = null)
 * @method Livre[]    findAll()
 * @method Livre[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class LivreRepository extends Depot
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Livre::class);
    }

    /**
     * @return Livre[] Retourne les livres qui n'ont pas Ã©tÃ© rendus
        SELECT l.*
        FROM livre l JOIN emprunt e ON l.id = e.livre_id
        WHERE e.dateRetour IS NULL
     * 
     */
    public function findLivresEmpruntes(): array
    // public function livresIndisponibles(): array
    {
        return $this->createQueryBuilder('l')
            ->join(Emprunt::class, "e", "WITH", "l.id = e.livre")
            //! ->join("App\Entity\Emprunt", "e", "WITH", "e.livre=l.id")
            ->where('e.dateRetour IS NULL')
            // ->select("l")                            // ? inutile
            ->orderBy("l.titre")
            ->getQuery()
            ->getResult()
        ;
    }


    /**
        SELECT l.*
        FROM livre l 
        WHERE l.id NOT IN (
                            SELECT l.id
                            FROM emprunt e JOIN livre l ON e.livre_id = l.id
                            WHERE e.date_retour IS NULL 
                          ) 
     * ðŸ’¬: 

     * â€¢ l'utilisation de l'entityManager permet d'Ã©crire une requÃªte DQL
     * â€¢ on n'utilise pas les tables mais les classes entitÃ©s
     * â€¢ dans la requÃªte imbriquÃ©e, on ne peut pas utiliser 2x le mÃªme alias pour une table
     * â€¢ les noms des champs correspondent aux propriÃ©tÃ©s pas aux colonnes de la bdd
     * â€¢ dans les jointures, on ne peut pas utiliser ON, plutÃ´t WITH
     */
    public function livresDisponibles()
    {
        $entityManager = $this->getEntityManager();
        $query = $entityManager->createQuery(
            "SELECT l
             FROM App\Entity\Livre l 
             WHERE l.id NOT IN (
                SELECT liv.id
                FROM App\Entity\Emprunt e 
                JOIN App\Entity\Livre liv WITH e.livre = liv.id
                WHERE e.dateRetour IS NULL )
            ORDER BY l.titre"
        );
        return $query->getResult();
    }




    /**
     * Nombre de livres empruntÃ©s actuellement
     * @return integer
     * 
       SELECT COUNT(*)
       FROM livre l
        JOIN emprunt e ON l.id = e.livre_id
       WHERE e.dateRetour IS NULL
     */
    public function nbLivresEmpruntes() : int
    {
        $requete = $this->createQueryBuilder("l")
                        ->select("COUNT(l.id) as nb")
                        ->join(Emprunt::class, "e", "WITH", "e.livre = l.id")
                        ->andWhere('e.dateRetour IS NULL')
                        ->getQuery()
                        ->getOneOrNullResult();
        return $requete ? (int)$requete["nb"] : 0;
    }

    /**
     * Nombre de livres disponibles
     * @return integer
     */
    public function nbLivresDisponibles() : int
    {
        return $this->nb() - $this->nbLivresEmpruntes();
    }

    /**
     * Livres les plus empruntÃ©s
     * RequÃªte SQL :
        SELECT l.titre, COUNT(*) AS nb
        FROM livre l
          JOIN emprunt e ON l.id = e.livre_id
        GROUP BY l.titre
        ORDER BY nb DESC, l.titre ASC
     * 
     * @param $max integer
     */
    public function lesPlusEmpruntes($max=0)
    {
        // NB: s'il n'y a pas de champ reliant les deux entitÃ©s dans l'entitÃ© du Repository actuel  
        // NB: il faut prÃ©ciser les champs liÃ©s (? le mot ON ne fonctionne pas)                     
        // NB : dans la mÃ©thode select l Ã©quivaut Ã  l.*
        $requete = $this->createQueryBuilder("l")
                        ->join(Emprunt::class, "e", "WITH", "l.id = e.livre")
                        ->groupBy("l.titre")
                        ->select("l AS livre, COUNT(l.id) AS nbEmprunts")
                        ->orderBy("nbEmprunts", "DESC")
                        ->addOrderBy("l.titre", "ASC")
        ;
        if($max) $requete->setMaxResults($max);
        return  $requete->getQuery()
                        ->getResult()
        ;
    }

    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////



    public function recherche($mot){
        return $this->createQueryBuilder('l')
            ->andWhere('l.titre LIKE :val OR l.resume LIKE :val')
            ->setParameter('val', '%' . $mot . '%')
            ->orderBy('l.titre', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }



   /**
    *   SELECT l.*
    *   FROM livre l 
    *       JOIN livre_genre lc ON l.id = lc.livre_id
    *       JOIN genre g ON g.id = lc.genre_id
    *   WHERE g.mots_cles LIKE "%science%" OR g.libelle LIKE "%science%";
    */
    public function rechercheParGenres($motRecherche)
    {
         return $this->createQueryBuilder('l')
                     ->join("l.genres", "g")
                     ->where("g.mots_cles LIKE :mot OR g.libelle LIKE :mot")
                     ->setParameter("mot", "%$motRecherche%")
                     ->orderBy("g.libelle")
                     ->addOrderBy("l.titre")
                     ->getQuery()->getResult();
    }
 
    public function findByGenres(int $searchWord): array
    {
        $entityManager = $this->getEntityManager();
        $query = $entityManager->createQuery(
            "SELECT p
             FROM App\Entity\Livre l
             JOIN App\Entity\Genre g 
             WHERE g.mots_cles LIKE :mot OR g.libelle LIKE :mot
             ORDER BY g.libelle ASC, l.titre ASC"
        )->setParameter("mot", "%$searchWord%");

        // returns an array of Livre objects
        return $query->getResult();
    }



    /**
     * SELECT * FROM `produit`
     * WHERE categorie LIKE "%pull%"
     *      OR titre LIKE "%pull%"
     *      OR description LIKE "%pull%"
     */
    public function findByTitreCategorieDescription($recherche){
        
        // version avec EntityManager
        $entityManager = $this->getEntityManager();
        $requete = $entityManager->createQuery("SELECT p 
                                                FROM App\Entity\Produit p 
                                                WHERE p.categorie LIKE '%$recherche%' 
                                                    OR p.titre LIKE '%$recherche%'
                                                    OR p.description LIKE '%$recherche%'");
        return $requete->getResult();

        // version avec CreateQueryBuilder
        return $this->createQueryBuilder('p')
            ->andWhere('p.titre LIKE :val OR  p.categorie LIKE :val OR p.description LIKE :val')
            ->setParameter('val', "%" . $recherche . "%")
            ->orderBy('p.titre', 'ASC')
            ->getQuery()
            ->getResult()
        ;
        

    }


    /**
     * @return Livre[] Retourne les livres qui n'ont pas Ã©tÃ© rendus
     * 
     */
    public function findByLivresEmpruntes()
    {
        /*
        SELECT l.*
        FROM livre l JOIN emprunt e ON l.id = e.livre_id
        WHERE e.dateRetour IS NULL
        ORDER BY l.auteur ASC, l.titre

        Pour crÃ©er une nouvelle mÃ©thode dans un Repository qui va donc exÃ©cuter une requÃªte SELECT
        on utilise la mÃ©thode createQueryBuider. A partir de l'objet renvoyÃ© par createQueryBuilder, on peut
        construire la requÃªte en utilsant plusieurs mÃ©thodes qui correspondent aux clauses de la requÃªte SQL

        Le paramÃ¨tre de createQueryBuilder est l'alias de la table sur laquelle on fait la requÃªte (cela dÃ©pend donc
        du Repository dans lequel vous Ã©crivez votre code, donc ici il s'agit de la table Livre)
        ensuite vous pouvez enchainer les mÃ©thodes join, where, andWhere, orderBy, ....
        Si vous utilisez des paramÃ¨tres dans une partie de la requÃªte (par exemple :
            ->where("l.titre = :titre)
        n'oubliez pas d'utilier setParameter pour donner une valeur Ã  ce paramÃ¨tre :
            ->setParameter('titre', $titre)
        */
        return $this->createQueryBuilder('l')
            ->join(Emprunt::class, "e", "WITH", "l.id = e.livre")
            ->where('e.dateRetour IS NULL')
            ->orderBy('l.auteur', 'ASC')
            ->addOrderBy("l.titre")
            ->getQuery()
            ->getResult()
        ;
    }

    public function findByRecherche($value)
    {
        /*  SELECT l.*
            FROM livre
            WHERE l.titre LIKE :val OR l.auteur LIKE :val */

        return $this->createQueryBuilder('l')
            ->andWhere('l.titre LIKE :val')
            ->orWhere('l.auteur LIKE :val')
            ->setParameter('val', '%' . $value . '%')
            ->orderBy('l.auteur')
            ->orderBy('l.titre')
            ->getQuery()
            ->getResult()
        ;
    }



    
    // /**
    //  * @return Livre[] Returns an array of Livre objects
    //  */
    /*
    public function findByExampleField($value)
    {
        return $this->createQueryBuilder('l')
            ->andWhere('l.exampleField = :val')
            ->setParameter('val', $value)
            ->orderBy('l.id', 'ASC')
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
    }
    */

    /*
    public function findOneBySomeField($value): ?Livre
    {
        return $this->createQueryBuilder('l')
            ->andWhere('l.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
}
