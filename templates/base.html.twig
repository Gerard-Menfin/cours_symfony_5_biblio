<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>{% block title %}Biblio SF5{% endblock %}</title>
        <link rel="shortcut icon" href="{{ asset(chemin_images ~ "logo.png" )}}" type="image/png">
		
        {# Run `composer require symfony/webpack-encore-bundle` and uncomment the following Encore helpers to start using Symfony UX #}
		{% block stylesheets %}
			{{ encore_entry_link_tags('app') }}
		{% endblock %}

		{% block javascripts %}
			{{ encore_entry_script_tags('app') }}
		{% endblock %}
	</head>

    {# COURS : 
        app.request.schemeAndHttpHost           : protocole - domaine
        app.request.attributes.get("_route")    : retourne le nom de la route correspondant à l'URL actuelle
        app.request.pathinfo                    : URL relatif
        url("app_register")                     : retourne URL complet selon une route
        path("app_register")                    : retourne URL relatif selon une route
    #}
    <body>
        <div class="container">
            {% block menu %}
                {% include "_partiels/_menu.html.twig" %}
            {% endblock %}
                
            <div id="wrap" class="right-aside">

                {% include "_partiels/_messages.html.twig" %}
                
                <div class="mb-5" id="main">
                    <h1 class="mt-2 mb-3 text-center">{% block titre %}Bienvenue à la bibliothèque{% endblock %}</h1>

                    {% block body %}{% endblock %}
                </div>
            </div>
            {# <footer class="container">Ceci est le footer</footer> #}
            {# {% include "_partiels/_footer.html.twig" %} #}
        </div>
    </body>
</html>


{# 

{# } : balise twig pour les commentaires
{% %} : balise twig pour les structures, instructions
{{ }} : balise twig équivalent de la balise PHP echo <?= ?>

HÉRITAGE
    {% extends 'nom_du_template_parent' %}  : permet à la vue d'hériter d'une autre vue 
    - Si un template hérite d'un autre template, le contenu de ses balises 'block'
        remplacera le contenu des balises 'block' du template parent
    - ⚠ IMPORTANT ⚠
        dans une vue qui hérite, on ne peut mettre du contenu que dans un 'block'

                            {% block nom_du_block %}
                                ...
                            {% endblock %}

    - Le contenu des blocks de la vue remplacera le contenu des blocks de la vue parente
    - Si on veut conserver le contenu du block parent correspondant ajouter du contenu avant ou après,
        on utilise la fonction parent()
        
                            {{ parent() }}

STRUCTURE CONDITIONNELLE
    - En Twig, il n'y a que le IF
        ╔═══════════════════════════════════════════╦═══════════════════════════════════════════╗
        ║                   PHP                     ║              TWIG                         ║
        ╠═══════════════════════════════════════════╬═══════════════════════════════════════════╣
        ║   if(condition) { ... }                   ║   {% if condition %} ... {% endif %}      ║
        ║-------------------------------------------║-------------------------------------------║
        ║   if (condition) {                        ║   {% if condition %}                      ║
        ║       ...                                 ║        ...                                ║
        ║   } else {                                ║   {% else %}                              ║
        ║       ...                                 ║        ...                                ║
        ║   }                                       ║   {% endif %}                             ║
        ║-------------------------------------------║-------------------------------------------║
        ║   if (condition1) {                       ║   {% if condition %}                      ║
        ║       ...                                 ║        ...                                ║
        ║   } elseif (condition2) {                 ║   {% elseif condition2 %}                 ║
        ║       ...                                 ║        ...                                ║
        ║   } else {                                ║   {% else %}                              ║
        ║       ...                                 ║        ...                                ║
        ║   }                                       ║   {% endif %}                             ║
        ║-------------------------------------------║-------------------------------------------║
        ║   switch (variable) {                     ║   {% if variable == valeur1 %}            ║
        ║       case valeur1:                       ║        ...                                ║
        ║           ...                             ║   {% elseif variable == valeur2 %}        ║
        ║           break;                          ║        ...                                ║
        ║       case valeur2:                       ║   {% else %}                              ║
        ║           ...                             ║        ...                                ║
        ║           break;                          ║   {% endif %}                             ║
        ║       default:                            ║                                           ║
        ║           ...                             ║                                           ║
        ║   }                                       ║                                           ║
        ╚═══════════════════════════════════════════╩═══════════════════════════════════════════╝


    - CONDITION : on peut utiliser des 'tests'. Ces fonctions Twig s'utilisent avec la syntaxe suivante
         ... is test
        
        Par exemple : 
        
        ╔═══════════════════════════════════════════╦═══════════════════════════════════════════╗
        ║                   PHP                     ║              TWIG                         ║
        ╠═══════════════════════════════════════════╬═══════════════════════════════════════════╣
        ║   if (isset($variable))                   ║   if variable is defined                  ║
        ║   if (isset($variable))                   ║   if variable is defined                  ║
        ╚═══════════════════════════════════════════╩═══════════════════════════════════════════╝
        
    - ⚠ Notez qu'il n'y a pas de () autour de la condition

    - OPÉRATEURS LOGIQUES
        ╔══════╦══════╗   
        ║ PHP  ║ TWIG ║
        ╠══════╬══════╣
        ║  &&  ║ and  ║
        ║  ||  ║ or   ║
        ║  !   ║ not  ║
        ╚══════╩══════╝

STRUCTURE ITERATIVE
    - En Twig, il n'y a que la boucle FOR
        ╔═══════════════════════════════════════════════╦═══════════════════════════════════════╗
        ║                    PHP                        ║              TWIG                     ║
        ╠═══════════════════════════════════════════════╬═══════════════════════════════════════╣
        ║   for($i=1 ; $i<=10 ; $i++) {                 ║   {% for i in 1..10 %}                ║
        ║   foreach($tableau as $valeur) {              ║   {% for valeur in tableau %}         ║
        ║   foreach($tableau as $indice => $valeur) {   ║   {% for indice, valeur in tableau %} ║
        ╚═══════════════════════════════════════════════╩═══════════════════════════════════════╝


    - Syntaxe : 
        {% for i in 1..10 %}
            ...
        {% endfor %}
    
    - Pour une boucle sur un tableau, on peut gérer le case où le tableau est vide
        {% for valeur in tableau %}
            ...
        {% else %}
            ...
        {% endfor %}


#}
